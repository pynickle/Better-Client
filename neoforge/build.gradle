plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    runs {
        data {
            clientData()
            programArgs "--all", "--mod", "better_client"
            programArgs "--output", project(':common').file('src/generated/resources').getAbsolutePath()
            programArgs "--existing", project(':common').file('src/main/resources').getAbsolutePath()
        }
    }
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

sourceSets.main.resources { srcDir project(':common').file('src/generated/resources').getAbsolutePath() }

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
    maven {
        name = 'Kotlin for Forge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"

    implementation 'thedarkcolour:kotlinforforge-neoforge:5.10.0'

    modImplementation "dev.architectury:architectury-neoforge:$rootProject.architectury_api_version"

    implementation("dev.isxander:yet-another-config-lib:${yacl_version}+1.21.6-neoforge"){
        exclude group: "net.neoforged.fancymodloader", module: "loader"
        exclude group: "thedarkcolour", module: "kotlinforforge-neoforge"
        exclude group: "thedarkcolour", module: "kfflang-neoforge"
        exclude group: "thedarkcolour", module: "kffmod-neoforge"
        exclude group: "thedarkcolour", module: "kfflib-neoforge"
    }

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/neoforge.mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    exclude "architectury.common.json"
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
    atAccessWideners.add("better_client.accesswidener")
}
